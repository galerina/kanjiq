angular.module('kanjiApp').factory('search', ['$http', 'kanjiDictionary', 'wordDictionary',
                                    function($http, kanjiDictionary, wordDictionary) {
    var kanjiLookup,kanjiFeatures;

    $http.get('data/kanjiLookup.json').success(function(data) {
        kanjiLookup = data;
        kanjiFeatures = Object.keys(data).sort();
        ready();
    });

    var ready = _.after(2, function() {
        onReadyFunction();
    });

    // Given a list of arrays, generate all sequences that can be generated by using
    // exactly one element of each of the arrays.
    var generateAllSequences = function(arrays) {
        var sequences = [[]];

        arrays.forEach(function(array) {
            // console.log(array);
            var newSequences = [];
            array.forEach(function(elem) {
                sequences.forEach(function(sequence) {
                    newSequences.push(sequence.concat(elem))
                });
            });

            sequences = newSequences;
        });

        return sequences.map(function(s) {
            return _.uniq(s);
        });
    };


    var generateAllQueryArrays = function(query) {
        var alternates = [];
        tokenize(query).forEach(function(token) {
            var possibilities = [token];
            if (_.has(kanjiLookup["meaningTable"], token)) {
                kanjiLookup["meaningTable"][token].forEach(function(kanji) {
                    possibilities.push(kanjiDictionary.getRadicals(kanji));
                });
            } else if (isKanji(token)) {
                var radicals = kanjiDictionary.getRadicals(token);
                if (radicals.length > 1) {
                    possibilities.push(radicals);
                }
            }

            alternates.push(possibilities);
        });

        return generateAllSequences(alternates);
    };

    var tokenize = function(query) {
        var tokenRE = /(?:([^"'\s]+)\s*)|(?:"([^"']+)"\s*)|(?:'([^"']+)'\s*)/g;

        var match;
        var tokens = [];
        var lastIndex = 0;
        query = query.trim();
        while (match = tokenRE.exec(query)) {
            if (match.index != lastIndex) {
                break;
            }
            tokens.push(match[1] || match[2] || match[3]);
            lastIndex = tokenRE.lastIndex;
        }
        return tokens;
    };

    var unionOfSortedArrays = function(arrays) {
       if (_.isEmpty(arrays)) {
            return [];
        } else if (arrays.length == 1) {
            return arrays[0];
        }

        var cursors = [];
        for (var i = 0; i < arrays.length; i++) {
            cursors.push(0);
        }

        var out = []

        for (var j = 0; j < arrays[0].length; j++) {
            for (var i = 1; i < arrays.length; i++) {
                while (cursors[i] < arrays[i].length && arrays[i][cursors[i]] < arrays[0][j]) {
                    cursors[i]++;
                }

                if (cursors[i] == arrays[i].length) {
                    return out;
                }
            }

            var isCommonElement = true;
            for (var i = 1; i < arrays.length; i++) {
                if (arrays[0][j] != arrays[i][cursors[i]]) {
                    isCommonElement = false;
                    break;
                }
            }

            if (isCommonElement) {
                out.push(arrays[0][j]);
            }
        }
        return out;
    };

    var isJapaneseText = function(s) {
        var japaneseRE = /^[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]+$/;
        //                  -------------_____________-------------_____________-------------_____________
        //                  Punctuation   Hiragana     Katakana    Full-width       CJK      CJK Ext. A
        //                                                           Roman/      (Common &      (Rare)
        //                                                         Half-width    Uncommon)
        //                                                          Katakana
        return japaneseRE.exec(s.trim());
    };
    
    var isKanji = function(s) {
        var kanjiRE = /^[\u4e00-\u9faf\u3400-\u4dbf]$/;
        //                  -------------_____________-------------_____________-------------_____________
        //                  Punctuation   Hiragana     Katakana    Full-width       CJK      CJK Ext. A
        //                                                           Roman/      (Common &      (Rare)
        //                                                         Half-width    Uncommon)
        //                                                          Katakana
        return kanjiRE.exec(s);
    }

    var obj = {};
    obj.findKanji = function(query) {
        if (_.isEmpty(query)) {
            return [];
        }

        var results = [];

        generateAllQueryArrays(query).forEach(function(q) {
            var newResults = unionOfSortedArrays(q.map(function(token) {
                return kanjiLookup['radicalTable'][token] || kanjiLookup['meaningTable'][token] || [];
            }));
            Array.prototype.push.apply(results, newResults);
        });

        return _.uniq(results);
    };

    obj.findWords = function(query) {
        if (_.isEmpty(query)) {
            return [];
        }

        var queryParts = query.split("+").map(function(queryPart) {
            if (isJapaneseText(queryPart)) {
                return [queryPart];
            } else {
                return obj.findKanji(queryPart);
            }
        });

        console.log(queryParts);

        var results = [];
        generateAllSequences(queryParts).forEach(function(sequence) {
            var prefix = sequence.join("");
            Array.prototype.push.apply(results, wordDictionary.getWordsMatchingPrefix(prefix));
        });

        return results;
    };

    obj.onReady = function(fn) {
        onReadyFunction = fn;
        ready();
    };

    return obj;
}]);